'use client'

import { useState } from 'react'
import { useApp, useCanProceed, useValidation } from '@/lib/app-context'
import { useAnalytics } from '@/hooks/use-analytics'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { MiniMixtapeCard } from '@/components/ui/MiniMixtapeCard'
import { POPULAR_GENRES, CONTEXT_COPY, CONTEXT_CATEGORIES } from '@/constants'
import type { GenreType, WorkContext, MoodType } from '@/types'

export function QuickPathInput() {
  const { state, actions } = useApp()
  const { track } = useAnalytics()
  const canProceed = useCanProceed()
  const { validateGenres } = useValidation()
  const [step, setStep] = useState<'context' | 'mood' | 'genres'>('context')

  const handleContextSelect = (context: WorkContext) => {
    track.workContextSelected(context) // üìä Track context selection
    actions.setWorkContext(context)
    setStep('mood')
  }

  const handleMoodSelect = (mood: MoodType) => {
    track.moodSelected(mood) // üìä Track mood selection
    actions.setMood(mood)
    setStep('genres')
  }

  const handleGenreToggle = (genre: string) => {
    actions.clearError() // Clear any previous errors
    actions.toggleGenre(genre as GenreType)
    
    // üìä Track genre selection after state update
    setTimeout(() => {
      track.genresSelected(state.selectedGenres) // Track updated genres
    }, 0)
  }

  const handleGenerate = () => {
    // Final validation before generation
    const genreValidation = validateGenres(state.selectedGenres)
    if (!genreValidation.isValid) {
      actions.setError(genreValidation.error!)
      return
    }
    
    // üìä Track generation start (will be tracked by useAnalytics hook automatically)
    actions.startGeneration()
    actions.nextStep()
  }

  if (step === 'context') {
    return (
      <div className="max-w-5xl mx-auto">
        <div className="text-center mb-8">
          {/* FIXED: Updated copy - removed "work" to be more inclusive */}
          <h2 className="text-3xl font-bold text-white mb-4">
            What&apos;s your vibe right now?
          </h2>
          <p className="text-purple-200">Choose the context that matches how you&apos;ll use this playlist</p>
        </div>

        {/* WORK CONTEXTS */}
        <div className="mb-10">
          <h3 className="text-xl font-semibold text-white mb-6 text-center">
            üè¢ {CONTEXT_CATEGORIES.work.title}
          </h3>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
            {CONTEXT_CATEGORIES.work.contexts.map((context) => {
              const copy = CONTEXT_COPY[context]
              return (
                <MiniMixtapeCard
                  key={context}
                  title={copy.title.split(' ').slice(1).join(' ')} // Remove emoji for cleaner look
                  subtitle={context.toUpperCase()}
                  description={copy.description}
                  onClick={() => handleContextSelect(context)}
                  variant="purple"
                />
              )
            })}
          </div>
        </div>

        {/* ACTIVITY CONTEXTS */}
        <div className="mb-8">
          <h3 className="text-xl font-semibold text-white mb-6 text-center">
            üéØ {CONTEXT_CATEGORIES.activity.title}
          </h3>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
            {CONTEXT_CATEGORIES.activity.contexts.map((context) => {
              const copy = CONTEXT_COPY[context]
              const variants = ['pink', 'blue', 'green', 'purple'] as const
              const variant = variants[CONTEXT_CATEGORIES.activity.contexts.indexOf(context) % variants.length]
              
              return (
                <MiniMixtapeCard
                  key={context}
                  title={copy.title.split(' ').slice(1).join(' ')} // Remove emoji
                  subtitle={context.toUpperCase()}
                  description={copy.description}
                  onClick={() => handleContextSelect(context)}
                  variant={variant}
                />
              )
            })}
          </div>
        </div>
      </div>
    )
  }

  if (step === 'mood') {
    return (
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            How&apos;s your energy today?
          </h2>
          <p className="text-purple-200">Select the mood that fits your current vibe</p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
          <MiniMixtapeCard
            title="Calm & Focused"
            subtitle="CALM"
            description="Peaceful, steady concentration"
            onClick={() => handleMoodSelect('calm')}
            variant="blue"
          />
          <MiniMixtapeCard
            title="Energetic & Motivated"
            subtitle="ENERGY"
            description="Upbeat, driving, powerful"
            onClick={() => handleMoodSelect('energetic')}
            variant="pink"
          />
          <MiniMixtapeCard
            title="Ambient & Background"
            subtitle="AMBIENT"
            description="Atmospheric, unobtrusive"
            onClick={() => handleMoodSelect('ambient')}
            variant="purple"
          />
          <MiniMixtapeCard
            title="Uplifting & Positive"
            subtitle="UPLIFT"
            description="Optimistic, inspiring, bright"
            onClick={() => handleMoodSelect('uplifting')}
            variant="green"
          />
        </div>

        {/* Back Button */}
        <div className="text-center mt-8">
          <Button 
            onClick={() => setStep('context')}
            className="text-purple-300 hover:text-white bg-transparent hover:bg-purple-900/20"
          >
            ‚Üê Back to Context
          </Button>
        </div>
      </div>
    )
  }

  const genreValidation = validateGenres(state.selectedGenres)

  return (
    <div className="max-w-4xl mx-auto">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-white mb-4">
          Pick 2-3 genres you enjoy
        </h2>
        <p className="text-purple-200">Select the musical styles that resonate with you (max 5)</p>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
        {POPULAR_GENRES.map((genre) => (
          <Card 
            key={genre}
            className={`p-4 cursor-pointer transition-all duration-300 border-2 ${
              state.selectedGenres.includes(genre)
                ? 'border-purple-400 bg-gradient-to-br from-purple-600/50 to-pink-600/50'
                : 'border-purple-500/30 hover:border-purple-400 bg-gradient-to-br from-purple-900/50 to-pink-900/30'
            } backdrop-blur-sm ${
              state.selectedGenres.length >= 5 && !state.selectedGenres.includes(genre)
                ? 'opacity-50 cursor-not-allowed'
                : ''
            }`}
            onClick={() => handleGenreToggle(genre)}
          >
            <div className="text-center">
              <div className="text-white font-medium capitalize">{genre}</div>
            </div>
          </Card>
        ))}
      </div>

      {/* Validation Messages */}
      {state.error && (
        <div className="text-center mb-4">
          <div className="text-red-300 text-sm bg-red-900/20 border border-red-500/30 rounded-lg p-3 inline-block">
            {state.error}
          </div>
        </div>
      )}

      {genreValidation.warning && !state.error && (
        <div className="text-center mb-4">
          <div className="text-yellow-300 text-sm bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-3 inline-block">
            {genreValidation.warning}
          </div>
        </div>
      )}

      <div className="text-center">
        <Button 
          onClick={handleGenerate}
          disabled={!canProceed}
          className="px-8 py-3 text-lg bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 disabled:opacity-50"
        >
          Generate My Playlist
        </Button>
        
        <p className="text-purple-300 text-sm mt-4">
          {state.selectedGenres.length}/5 genres selected
          {state.selectedGenres.length > 0 && (
            <span className="block mt-1">
              Selected: {state.selectedGenres.join(', ')}
            </span>
          )}
        </p>

        {/* Back Button */}
        <div className="mt-6">
          <Button 
            onClick={() => setStep('mood')}
            className="text-purple-300 hover:text-white bg-transparent hover:bg-purple-900/20"
          >
            ‚Üê Back to Mood
          </Button>
        </div>
      </div>
    </div>
  )
}